# Generated by Django 2.1.2 on 2018-11-23 14:15

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author_full_name', models.CharField(max_length=256)),
                ('author_email', models.EmailField(max_length=254)),
                ('description', models.TextField()),
                ('created', models.DateField(default=django.utils.timezone.now)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author_full_name', models.CharField(max_length=256)),
                ('author_email', models.EmailField(max_length=254)),
                ('description', models.TextField()),
                ('created', models.DateField(default=django.utils.timezone.now)),
                ('title', models.CharField(max_length=256, unique=True)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='faq.Category')),
            ],
        ),
        migrations.AddField(
            model_name='answer',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='faq.Question'),
        ),
        migrations.AlterUniqueTogether(
            name='question',
            unique_together={('title', 'author_email')},
        ),
    ]
